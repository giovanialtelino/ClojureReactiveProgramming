["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$form",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","~:line",181,"~:column",7,"~:end-line",181,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^V",[["~$spec"]]]]],"~:doc","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",11,"~:method-params",["^V",[["^X"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^R",1,"~:variadic?",false,"^Q",181,"~:ret-tag","~$any","^S",181,"~:max-fixed-arity",1,"~:fn-var",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns the spec as data"],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1407,"^R",19,"^S",1407,"^T",31,"~:skip-wiki",true,"^U",["^V",["^W",["^V",[["^M","~$pred","~$gfn"]]]]],"^Y","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^M","^19","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1407,"^13","~$cljs.spec.alpha/t_cljs$spec$alpha37122","^S",1407,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:"]]]]],"^Y","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",21,"^R",16,"^S",21,"^T",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",33,"^R",1,"^1>",true,"^Q",21,"^S",21,"~:tag","~$number","^Y","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",35,"^R",16,"^S",35,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",35,"^S",35,"^1@","^1A","^Y","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",841,"^R",16,"^S",841,"^T",26,"~:private",true],"^1E",true,"^=","~$cljs.spec.alpha/empty-coll","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",26,"^R",1,"^Q",841,"^S",841,"^1@","~$cljs.core/IMap"],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",235,"^R",7,"^S",235,"^T",22,"^U",["^V",["^W",["^V",[["~$ed"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",22,"^[",["^V",[["^1I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",235,"^13",["^6",["^14","~$clj-nil"]],"^S",235,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1159,"^R",8,"^S",1159,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^M","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-explain","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^M","~$p","^1M","^1N","^1O","^1P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1159,"^13",["^6",["~$cljs.core/IVector","^14","^1K"]],"^S",1159,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p","^1M","^1N","^1O","^1P"]]]]]],"~$Specize",["^ ","^O",["^ ","~:protocol-symbol",true,"^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",21,"^R",14,"^Q",131,"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^M"]]]],"^S",131,"^Y",null,"~:jsdoc",["^V",["@interface"]]],"^1T",true,"^=","~$cljs.spec.alpha/Specize","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",21,"^R",1,"^Q",131,"^1U",["^ ","^1V",["^ ","^1W",[["~$_"],["~$_","^M"]]]],"~:info",null,"^S",131,"^1@","^14","~:impls",["^6",["~$cljs.spec.alpha/t_cljs$spec$alpha36891","~$cljs.spec.alpha/t_cljs$spec$alpha36824","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha37091","~$cljs.spec.alpha/t_cljs$spec$alpha37098","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha36833","~$cljs.spec.alpha/t_cljs$spec$alpha36799","^1<","~$cljs.spec.alpha/t_cljs$spec$alpha36905","~$cljs.core/PersistentHashSet","~$cljs.spec.alpha/t_cljs$spec$alpha36810","~$cljs.spec.alpha/t_cljs$spec$alpha36746","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","~$cljs.spec.alpha/t_cljs$spec$alpha37119","~$cljs.spec.alpha/t_cljs$spec$alpha36917"]],"^Y",null,"^1X",["^V",["@interface"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1044,"^R",19,"^S",1044,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$ks","~$ps","~$forms"]]]]],"^Y","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2A","^2B","^2C"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1044,"^13","^14","^S",1044,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",656,"^R",8,"^S",656,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["~$tag","~$ret"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/tagged-ret","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2F","^2G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",656,"^13","~$cljs.core/MapEntry","^S",656,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2F","^2G"]]]]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^1E",true,"^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"~:top-fn",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",380,"^S",380,"^U",["^V",["^W",["^V",[["^19","~$x"],["^19","~$x","^M"]]]]],"^Y","internal helper function that returns true when x is valid for spec."],"^1E",true,"^=","~$cljs.spec.alpha/pvalid?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",380,"^S",380,"^15",3,"^16",true,"^U",["^V",[["^19","~$x"],["^19","~$x","^M"]]],"^Y","internal helper function that returns true when x is valid for spec."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",306,"^R",19,"^S",306,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["~$k","^M","^X"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",306,"^S",306,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$k","^M","^X"]]]]],"^Y","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",262,"^R",1,"^S",262,"^T",29,"^1>",true,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",262,"^R",16,"^S",262,"^T",29,"^1>",true]],"~$*runtime-asserts*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1479,"^R",3,"^S",1479,"^T",20,"^1E",true,"^1>",true],"^1E",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1477,"^S",1479,"^1@","~$boolean"],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1291,"^R",19,"^S",1291,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["~$re","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^2U","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1291,"^13","^23","^S",1291,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^2U","^1:"]]]]],"^Y","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",813,"^R",19,"^S",813,"^T",34,"^18",true,"^U",["^V",["^W",["^V",[["^2C","~$preds","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^[",["^V",[["^2C","^2X","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",813,"^13","^28","^S",813,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",219,"^R",7,"^S",219,"^T",20,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",219,"^13",["^6",["^1G","^1K"]],"^S",219,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"~$t_cljs$spec$alpha37119",["^ ","~:num-fields",2,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","^1Y","~$cljs.core/IWithMeta"]],"^=","^2>","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","~:type",true,"~:anonymous",true,"^R",5,"^Q",1391,"~:record",false,"^1@","~$function","~:skip-protocol-flag",["^6",["^34","^35"]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1110,"^R",8,"^S",1110,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/add-ret","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p","~$r","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1110,"^13",["^6",[null,"^14"]],"^S",1110,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",738,"^R",8,"^S",738,"^T",25,"^1E",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1M","^1N","^1O","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/explain-pred-list","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["^2C","^2X","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",738,"^13",["^6",["^1R","^14","^1K"]],"^S",738,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1M","^1N","^1O","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",19,"^R",14,"^S",19,"^T",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",21,"~:const-expr",["^ ","~:op","^3@","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1@","^1A"],"^R",1,"^3@",true,"^Q",19,"^S",19,"^1@","^1A"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1487,"^R",7,"^S",1487,"^T",20,"^U",["^V",["^W",["^V",[["~$flag"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^3J"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1487,"^S",1487,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^3J"]]]]],"^Y","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1042,"^R",8,"^S",1042,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$p1","~$p2"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/alt2","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^3M","^3N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1042,"^13",["^6",[null,"^14"]],"^S",1042,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3M","^3N"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",417,"^R",8,"^S",417,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"^1E",true,"^=","~$cljs.spec.alpha/and-k-gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",417,"^13","^14","^S",417,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$s"]]]]],"^Y","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1495,"^R",7,"^S",1495,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1495,"^S",1495,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",123,"^R",7,"^S",123,"^T",13,"^U",["^V",["^W",["^V",[["~$f-n"]]]]]],"^=","~$cljs.spec.alpha/fn-sym","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^3U"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",123,"^13",["^6",["^14","^1K"]],"^S",123,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^3U"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1442,"^R",7,"^S",1442,"^T",21,"^U",["^V",["^W",["^V",[["~$start","~$end","~$inst"]]]]],"^Y","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",21,"^[",["^V",[["^3X","^3Y","^3Z"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1442,"^13","^2S","^S",1442,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3X","^3Y","^3Z"]]]]],"^Y","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",47,"^R",20,"^S",47,"^T",32,"^1E",true],"^1E",true,"^=","~$cljs.spec.alpha/registry-ref","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",32,"^R",1,"^Q",47,"^S",47,"^1@","^14"],"~$accept?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",979,"^R",8,"^S",979,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p__36966"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",979,"^13","^2S","^S",979,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^43",["^44"]]]]]]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",749,"^R",19,"^S",749,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["^2C","^2X","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",749,"^13","^20","^S",749,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",977,"^R",8,"^S",977,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",977,"^13","^1G","^S",977,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",351,"^R",8,"^S",351,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$rmap","~$id","^1M","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/recur-limit?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^4<","^4=","^1M","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",351,"^13","^2S","^S",351,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^4<","^4=","^1M","~$k"]]]]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",45,"^R",4,"^S",45,"^T",13,"~:protocol","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/describe*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",45,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",423,"^R",19,"^S",423,"^T",32,"^18",true,"^U",["^V",["^W",["^V",[[["^ ","^43",["~$req-un","~$opt-un","~$keys-pred","~$pred-exprs","~$opt-keys","~$req-specs","~$req","~$req-keys","~$opt-specs","~$pred-forms","~$opt","^1:"],"~:as","~$argm"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",32,"^[",["^V",[["~$p__36743"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",423,"^13","^2;","^S",423,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^ ","^43",["^4C","^4D","^4E","^4F","^4G","^4H","^4I","^4J","^4K","^4L","^4M","^1:"],"^4N","^4O"]]]]]],"^Y","Do not call this directly, use 'spec' with a map argument"],"~$t_cljs$spec$alpha37091",["^ ","^31",3,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^23","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",3,"^Q",1294,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",66,"^R",8,"^S",66,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1E",true,"^=","~$cljs.spec.alpha/reg-resolve!","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",66,"^13",["^6",[null,"^14"]],"^S",66,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$->t_cljs$spec$alpha36917",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"~:factory","~:positional","^U",["^V",["^W",["^V",[["^M","~$max-count","~$check?","~$p__36914","~$map__36915","^1:","~$gen-max","^19","~$cpred","~$conform-keys","~$kind-form","~$addcv","~$cfns","~$describe-form","~$distinct","^X","~$kfn","~$gen-into","~$count","~$min-count","~$opts","~$kind","~$conform-all","~$conform-into","~$meta36918"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36917.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36917","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^M","^4X","^4Y","^4Z","^4[","^1:","^50","^19","^51","^52","^53","^54","^55","^56","^57","^X","^58","^59","^5:","^5;","^5<","^5=","^5>","^5?","^5@"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",6,"^12",false,"^4V","^4W","^Q",881,"^13","^2?","^15",25,"^16",true,"^U",["^V",["^W",["^V",[["^M","^4X","^4Y","^4Z","^4[","^1:","^50","^19","^51","^52","^53","^54","^55","^56","^57","^X","^58","^59","^5:","^5;","^5<","^5=","^5>","^5?","^5@"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36917."],"~$re-explain",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1265,"^R",8,"^S",1265,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^1M","^1N","^1O","^2U","^1P"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-explain","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^1M","^1N","^1O","^2U","^1P"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1265,"^13",["^6",["^1R","^14","^1K"]],"^S",1265,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^1M","^1N","^1O","^2U","^1P"]]]]]],"~$alts",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1041,"^R",8,"^S",1041,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$&","^2B"]]]]],"^2K",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]]],"^1E",true,"^=","~$cljs.spec.alpha/alts","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^2K",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]],"^[",[["^V",["^2B"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",1041,"^13","^14","^S",1041,"^15",0,"^16",true,"^U",["^V",[["~$&","^2B"]]]],"~$t_cljs$spec$alpha36891",["^ ","^31",6,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^20","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",5,"^Q",780,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$->t_cljs$spec$alpha37098",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35","~$cljs.core/ILookup"]],"^3:",["^6",["^34","^35","^5H"]],"^4V","^4W","^U",["^V",["^W",["^V",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^1:","~$specs","~$meta37099"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37098.","^P",null],"^32",["^6",["^33","^34","^1Y","^35","^5H"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha37098","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^5I","^5J","^5K","^5L","^5M","^5N","^1:","^5O","^5P"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",1343,"^13","^24","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^5I","^5J","^5K","^5L","^5M","^5N","^1:","^5O","^5P"]]]]],"^3:",["^6",["^34","^35","^5H"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37098."],"~$with-name",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",85,"^R",8,"^S",85,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^X","~$name"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/with-name","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X","^5S"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",85,"^13",["^6",[null,"~$clj","^14","~$cljs.core/MetaFn","^1K"]],"^S",85,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^5S"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",270,"^R",7,"^S",270,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",270,"^13","^14","^S",270,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",93,"^R",8,"^S",93,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/spec-name","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",93,"^13",["^6",[null,"^14","^1K"]],"^S",93,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",335,"^R",1,"^S",335,"^T",18,"~:declared",true,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",335,"^R",10,"^S",335,"^T",18,"^61",true]],"~$t_cljs$spec$alpha36833",["^ ","^31",9,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^26","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",5,"^Q",697,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",44,"^R",4,"^S",44,"^T",13,"^4@","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/with-gen*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","^1:"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",44,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1:"]]]]],"^Y",null],"~$->t_cljs$spec$alpha37122",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","~$meta37123"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37122.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha37122","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^M","^19","^1:","^X","^66"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",1411,"^13","^1<","^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^X","^66"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37122."],"~$k-gen",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",397,"^R",8,"^S",397,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1E",true,"^=","~$cljs.spec.alpha/k-gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",397,"^13",["^6",["^14","^1K"]],"^S",397,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$f"]]]]],"^Y","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",659,"^R",19,"^S",659,"^T",31,"^18",true,"^U",["^V",["^W",["^V",[["^:","^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",31,"^[",["^V",[["^:","^2C","^2X","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",659,"^13","^26","^S",659,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",159,"^R",8,"^S",159,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$s"],["~$s","^M"]]]]],"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]]],"^1E",true,"^=","~$cljs.spec.alpha/specize","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["~$s","^M"]]],"^U",["^V",[["~$s"],["~$s","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["~$s","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",159,"^S",159,"^15",2,"^16",true,"^U",["^V",[["~$s"],["~$s","^M"]]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",27,"^R",16,"^S",27,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",27,"^S",27,"^1@","^1A","^Y","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^1T",true,"^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^R",14,"^Q",39,"^1U",["^ ","^1V",["^ ","~$conform*",[["^X","~$x"]],"~$unform*",[["^X","~$y"]],"~$explain*",[["^X","^1M","^1N","^1O","~$x"]],"~$gen*",[["^X","~$overrides","^1M","^4<"]],"^63",[["^X","^1:"]],"^4?",[["^X"]]]],"^S",39,"^Y",null,"^1X",["^V",["@interface"]]],"^1T",true,"^=","^33","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^R",1,"^Q",39,"^1U",["^ ","^1V",["^ ","^6A",[["^X","~$x"]],"^6B",[["^X","~$y"]],"^6C",[["^X","^1M","^1N","^1O","~$x"]],"^6D",[["^X","^6E","^1M","^4<"]],"^63",[["^X","^1:"]],"^4?",[["^X"]]]],"^1Z",null,"^S",39,"^1@","^14","^1[",["^6",["^20","^21","^23","^24","^26","^27","^1<","^28","^2:","^2;","^2>","^2?"]],"^Y",null,"^1X",["^V",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",174,"^R",7,"^S",174,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",174,"^13","^14","^S",174,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",371,"^R",7,"^S",371,"^T",13,"^U",["^V",["^W",["^V",[["^X","~$x"],["^X","~$x","^M"]]]]],"^Y","Helper function that returns true when x is valid for spec.","^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",371,"^S",371,"^15",3,"^16",true,"^U",["^V",[["^X","~$x"],["^X","~$x","^M"]]],"^Y","Helper function that returns true when x is valid for spec."],"^F",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",293,"^R",7,"^S",293,"^T",10,"^U",["^V",["^W",["^V",[["^X"],["^X","^6E"]]]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^6E"]]],"^U",["^V",[["^X"],["^X","^6E"]]],"^11",["^V",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",10,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["^X"],["^X","^6E"]]],"^U",["^V",[["^X"],["^X","^6E"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^X"],["^X","^6E"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",293,"^S",293,"^15",2,"^16",true,"^U",["^V",[["^X"],["^X","^6E"]]],"^Y","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1386,"^R",7,"^S",1386,"^T",20,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1386,"^13","^2>","^S",1386,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^6B",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",41,"^R",4,"^S",41,"^T",11,"^4@","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/unform*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",11,"^[",["^V",[["^X","~$y"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",41,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$y"]]]]],"^Y",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",323,"^R",8,"^S",323,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"^1E",true,"^=","~$cljs.spec.alpha/->sym","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",323,"^13",["^6",[null,"^14"]],"^S",323,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",187,"^R",7,"^S",187,"^T",13,"^U",["^V",["^W",["^V",[["^M"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",187,"^13",["^6",[null,"^14"]],"^S",187,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^M"]]]]]],"~$t_cljs$spec$alpha36799",["^ ","^31",6,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^27","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",6,"^Q",520,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$->t_cljs$spec$alpha36746",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["~$keys->specnames","^4M","~$map__36744","^4C","^4D","^1:","^4F","^4E","^4O","^4G","^4H","^4I","^4=","^4J","^4K","^4Q","~$k->s","^4L","~$meta36747"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36746.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36746","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^6T","^4M","^6U","^4C","^4D","^1:","^4F","^4E","^4O","^4G","^4H","^4I","^4=","^4J","^4K","^4Q","^6V","^4L","^6W"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",430,"^13","^2;","^15",19,"^16",true,"^U",["^V",["^W",["^V",[["^6T","^4M","^6U","^4C","^4D","^1:","^4F","^4E","^4O","^4G","^4H","^4I","^4=","^4J","^4K","^4Q","^6V","^4L","^6W"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36746."],"~$regex?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",80,"^R",7,"^S",80,"^T",13,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",80,"^13",["^6",[null,"^14"]],"^S",80,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$t_cljs$spec$alpha36810",["^ ","^31",9,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^2:","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",6,"^Q",556,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^1E",true,"^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",16,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["^5;","~$s"]]],"^U",["^V",[["~$s"],["^5;","~$s"]]],"^11",["^V",[null,null]]],"^R",8,"^Q",406,"^S",406,"^U",["^V",["^W",["^V",[["~$s"],["^5;","~$s"]]]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1E",true,"^=","~$cljs.spec.alpha/or-k-gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",16,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$s"],["^5;","~$s"]]],"^U",["^V",[["~$s"],["^5;","~$s"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$s"],["^5;","~$s"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",406,"^S",406,"^15",2,"^16",true,"^U",["^V",[["~$s"],["^5;","~$s"]]],"^Y","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1449,"^R",7,"^S",1449,"^T",20,"^U",["^V",["^W",["^V",[["^3X","^3Y","~$val"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^3X","^3Y","^73"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1449,"^13",["^6",["^2S","^14"]],"^S",1449,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^3X","^3Y","^73"]]]]],"^Y","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$t_cljs$spec$alpha36746",["^ ","^31",19,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^2;","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",5,"^Q",430,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$dt",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",358,"^R",8,"^S",358,"^T",10,"^1E",true,"^U",["^V",["^W",["^V",[["^19","~$x","^M"],["^19","~$x","^M","~$cpred?"]]]]],"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]],"^11",["^V",[null,null]]]],"^1E",true,"^=","~$cljs.spec.alpha/dt","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",10,"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]],"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",358,"^S",358,"^15",4,"^16",true,"^U",["^V",[["^19","~$x","^M"],["^19","~$x","^M","^77"]]]],"~$->t_cljs$spec$alpha36833",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^:","^2C","^2X","^1:","^4=","~$kps","^5O","~$cform","~$meta36834"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36833.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36833","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^:","^2C","^2X","^1:","^4=","^7:","^5O","^7;","^7<"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",697,"^13","^26","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^:","^2C","^2X","^1:","^4=","^7:","^5O","^7;","^7<"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36833."],"~$->t_cljs$spec$alpha36799",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^M","^19","^1:","^77","~$unc","~$meta36800"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36799.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36799","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^M","^19","^1:","^77","^7?","^7@"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",6,"^12",false,"^4V","^4W","^Q",520,"^13","^27","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^77","^7?","^7@"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36799."],"~$preturn",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1074,"^R",8,"^S",1074,"^T",15,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/preturn","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1074,"^13",["^6",[null,"^14","^22","^2I","^1K"]],"^S",1074,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1252,"^R",8,"^S",1252,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","~$xs","^4N","~$data"]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-conform","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["~$p","~$p__37072"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1252,"^13",["^6",[null,"^14","^22","^2I","^1K"]],"^S",1252,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p",["~$x","~$&","^7E","^4N","^7F"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",74,"^R",7,"^S",74,"^T",12,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",74,"^13",["^6",[null,"^1K"]],"^S",74,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$x"]]]]],"^Y","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",318,"^R",7,"^S",318,"^T",15,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",318,"^13","^14","^S",318,"^15",0,"^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1010,"^R",19,"^S",1010,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1010,"^13",["^6",["^14","^1G","^1K"]],"^S",1010,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '+'"],"~$deriv",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1123,"^R",8,"^S",1123,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/deriv","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1123,"^13",["^6",[null,"^14","^1G","^1K"]],"^S",1123,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",49,"^R",8,"^S",49,"^T",20,"^1E",true,"^U",["^V",["^W",["^V",[["~$reg","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/deep-resolve","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^[",["^V",[["^7R","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",49,"^S",49,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^7R","~$k"]]]]]],"~$->t_cljs$spec$alpha37091",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^2U","^1:","~$meta37092"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37091.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha37091","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^2U","^1:","^7U"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",3,"^12",false,"^4V","^4W","^Q",1294,"^13","^23","^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2U","^1:","^7U"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37091."],"~$exercise",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1433,"^R",7,"^S",1433,"^T",15,"^U",["^V",["^W",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^11",["^V",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^11",["^V",[null,null,null]]],"^[",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^10",null,"^11",["^V",[null,null,null]],"^R",1,"^12",false,"^Q",1433,"^S",1433,"^15",3,"^16",true,"^U",["^V",[["^X"],["^X","~$n"],["^X","~$n","^6E"]]],"^Y","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$->t_cljs$spec$alpha36810",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^M","~$mmvar","~$retag","^1:","^4=","~$predx","~$dval","^2F","~$meta36811"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36810.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36810","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^M","^7Z","^7[","^1:","^4=","^80","^81","^2F","^82"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",6,"^12",false,"^4V","^4W","^Q",556,"^13","^2:","^15",9,"^16",true,"^U",["^V",["^W",["^V",[["^M","^7Z","^7[","^1:","^4=","^80","^81","^2F","^82"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36810."],"~$explain-data",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",226,"^R",7,"^S",226,"^T",19,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",226,"^13",["^6",["^1G","^1K"]],"^S",226,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^U",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",594,"^S",594,"^U",["^V",["^W",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]]]],"^Y","Do not call this directly, use 'tuple'"],"^=","~$cljs.spec.alpha/tuple-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^2K",["^ ","^12",false,"^15",3,"^[",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^U",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",594,"^S",594,"^15",3,"^16",true,"^U",["^V",[["^2C","^2X"],["^2C","^2X","^1:"]]],"^Y","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^U",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",544,"^S",544,"^U",["^V",["^W",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]]]],"^Y","Do not call this directly, use 'multi-spec'"],"^=","~$cljs.spec.alpha/multi-spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^U",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",544,"^S",544,"^15",4,"^16",true,"^U",["^V",[["^M","^7Z","^7["],["^M","^7Z","^7[","^1:"]]],"^Y","Do not call this directly, use 'multi-spec'"],"~$conform",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",168,"^R",7,"^S",168,"^T",14,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",168,"^13","^14","^S",168,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"~$t_cljs$spec$alpha36917",["^ ","^31",25,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^2?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",6,"^Q",881,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"^6D",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",43,"^R",4,"^S",43,"^T",8,"^4@","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X","^6E","^1M","^4<"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/gen*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",8,"^[",["^V",[["^X","^6E","^1M","^4<"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",43,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6E","^1M","^4<"]]]]],"^Y",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1339,"^R",19,"^S",1339,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["^5I","^5J","^5K","^5L","^5M","^5N","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["^5I","^5J","^5K","^5L","^5M","^5N","^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1339,"^13","^24","^S",1339,"^15",7,"^16",true,"^U",["^V",["^W",["^V",[["^5I","^5J","^5K","^5L","^5M","^5N","^1:"]]]]],"^Y","Do not call this directly, use 'fspec'"],"~$->t_cljs$spec$alpha36824",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^2C","^2X","^1:","^5O","~$cnt","~$meta36825"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36824.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36824","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^2C","^2X","^1:","^5O","^8A","^8B"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",6,"^12",false,"^4V","^4W","^Q",600,"^13","^21","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:","^5O","^8A","^8B"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36824."],"~$inck",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",355,"^R",8,"^S",355,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/inck","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["~$m","~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",355,"^13","^14","^S",355,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$m","~$k"]]]]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",31,"^R",16,"^S",31,"^T",34,"^1>",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",34,"^R",1,"^1>",true,"^Q",31,"^S",31,"^1@","^1A","^Y","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",330,"^R",7,"^S",330,"^T",15,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",330,"^13","^14","^S",330,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",282,"^R",8,"^S",282,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["^X","^6E","^1M","^4<","^M"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/gensub","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^X","^6E","^1M","^4<","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",282,"^13","^14","^S",282,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^6E","^1M","^4<","^M"]]]]]],"~$t_cljs$spec$alpha37098",["^ ","^31",9,"^32",["^6",["^33","^34","^1Y","^35","^5H"]],"^=","^24","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",5,"^Q",1343,"^38",false,"^1@","^39","^3:",["^6",["^34","^35","^5H"]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",116,"^R",8,"^S",116,"^T",16,"^1E",true,"^U",["^V",["^W",["^V",[["~$spec-or-k"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1E",true,"^=","~$cljs.spec.alpha/the-spec","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",16,"^[",["^V",[["^8N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",116,"^13",["^6",[null,"^5U","^2S","^14","^5V","^1K"]],"^S",116,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8N"]]]]],"^Y","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",793,"^R",8,"^S",793,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$x","^58","~$kform","^57","^5:","^5;","^4X","^1M","^1N","^1O"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/coll-prob","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^58","^8Q","^57","^5:","^5;","^4X","^1M","^1N","^1O"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",793,"^13",["^6",["^1R","^14","^1K"]],"^S",793,"^15",10,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^58","^8Q","^57","^5:","^5;","^4X","^1M","^1N","^1O"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","~:into","^56","~:cljs.spec.alpha/describe","^43",["^5=","~:cljs.spec.alpha/kind-form","^5:","^4X","^5;","^57","^50","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^52","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^U",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",843,"^S",843,"^U",["^V",["^W",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^=","~$cljs.spec.alpha/every-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^2K",["^ ","^12",false,"^15",4,"^[",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^U",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",843,"^S",843,"^15",4,"^16",true,"^U",["^V",[["^M","^19","^5<"],["^M","^19",["^ ","^5?","^8T","^56","^8U","^43",["^5=","^8V","^5:","^4X","^5;","^57","^50","^8W","^8X","^52","^8Y"],"^8Z",["^ ","^50",20],"^4N","^5<"],"^1:"]]],"^Y","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1060,"^R",8,"^S",1060,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/accept-nil?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1060,"^13",["^6",["^2S","^14","^1K"]],"^S",1060,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",105,"^R",8,"^S",105,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^8N"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1E",true,"^=","~$cljs.spec.alpha/maybe-spec","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^8N"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",105,"^13",["^6",[null,"^5U","^2S","^14","^5V","^1K"]],"^S",105,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^8N"]]]]],"^Y","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$t_cljs$spec$alpha36824",["^ ","^31",6,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^21","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",6,"^Q",600,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",28,"^2K",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^U",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^11",["^V",[null,null]]],"^18",true,"^R",19,"^Q",511,"^S",511,"^U",["^V",["^W",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]]]],"^Y","Do not call this directly, use 'spec'"],"^=","~$cljs.spec.alpha/spec-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",28,"^2K",["^ ","^12",false,"^15",5,"^[",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^U",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^11",["^V",[null,null]]],"^[",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",511,"^S",511,"^15",5,"^16",true,"^U",["^V",[["^M","^19","^1:","^77"],["^M","^19","^1:","^77","^7?"]]],"^Y","Do not call this directly, use 'spec'"],"~$t_cljs$spec$alpha36905",["^ ","^31",4,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^28","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",3,"^Q",816,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$->t_cljs$spec$alpha36891",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^2C","^2X","^1:","^5O","^7;","~$meta36892"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36891.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36891","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^2C","^2X","^1:","^5O","^7;","^99"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",780,"^13","^20","^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:","^5O","^7;","^99"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36891."],"~$invalid?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",163,"^R",7,"^S",163,"^T",15,"^U",["^V",["^W",["^V",[["^2G"]]]]],"^Y","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^2G"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",163,"^13","^2S","^S",163,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^2G"]]]]],"^Y","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1015,"^R",19,"^S",1015,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^2U","~$re-form","^2X","^4L"]]]]],"^Y","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2U","^9>","^2X","^4L"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1015,"^13","^1G","^S",1015,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2U","^9>","^2X","^4L"]]]]],"^Y","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",982,"^R",8,"^S",982,"^T",13,"^1E",true,"^U",["^V",["^W",["^V",[[["~#cmap",[["^3M","~$&","~$pr","^4N","^2B"],"~:ps",["~$k1","~$&","~$kr","^4N","^2A"],"~:ks",["~$f1","~$&","~$fr","^4N","^2C"],"~:forms","^2G","~:ret","~$rep+","~:rep+"]]]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/pcat*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",13,"^[",["^V",[["~$p__36969"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",982,"^13",["^6",["^14","^1G","^1K"]],"^S",982,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[[["^9A",[["^3M","~$&","^9B","^4N","^2B"],"^9C",["^9D","~$&","^9E","^4N","^2A"],"^9F",["^9G","~$&","^9H","^4N","^2C"],"^9I","^2G","^9J","^9K","^9L"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1029,"^R",8,"^S",1029,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/alt*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^2B","^2A","^2C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1029,"^13",["^6",["^14","^1G","^1K"]],"^S",1029,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",994,"^R",19,"^S",994,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^2A","^2B","^2C"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",994,"^13",["^6",["^14","^1G","^1K"]],"^S",994,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["^2A","^2B","^2C"]]]]],"^Y","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",337,"^R",8,"^S",337,"^T",25,"^1E",true,"^U",["^V",["^W",["^V",[["~$v","~$args"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/macroexpand-check","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",25,"^[",["^V",[["~$v","^9T"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",337,"^13","^1K","^S",337,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$v","^9T"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",55,"^R",8,"^S",55,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1E",true,"^=","~$cljs.spec.alpha/reg-resolve","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$k"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",55,"^13",["^6",[null,"^14"]],"^S",55,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$k"]]]]],"^Y","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",275,"^R",7,"^S",275,"^T",18,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",275,"^13","^14","^S",275,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1474,"^R",3,"^S",1474,"^T",20,"^1>",true,"^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",20,"^R",1,"^1>",true,"^Q",1467,"^S",1474,"^1@","^2S","^Y","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",211,"^R",7,"^S",211,"^T",15,"^U",["^V",["^W",["^V",[["^X","~$gen-fn"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X","^:1"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",211,"^13","^14","^S",211,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^:1"]]]]],"^Y","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^6A",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",40,"^R",4,"^S",40,"^T",12,"^4@","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/conform*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",40,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","~$x"]]]]],"^Y",null],"~$->t_cljs$spec$alpha36905",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^2C","^2X","^1:","~$meta36906"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36905.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha36905","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^2C","^2X","^1:","^:5"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",3,"^12",false,"^4V","^4W","^Q",816,"^13","^28","^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2C","^2X","^1:","^:5"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha36905."],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1482,"^R",16,"^S",1482,"^T",30,"^1@","^2S","^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",30,"^[",["^V",[[]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1482,"^13","^2S","^S",1482,"^15",0,"^1@","^2S","^16",true,"^U",["^V",["^W",["^V",[[]]]]],"^Y","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1052,"^R",8,"^S",1052,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["^3M","~$pret"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/noret?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["^3M","^::"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1052,"^13",["^6",["^2S","^14","^1K"]],"^S",1052,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^3M","^::"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1006,"^R",19,"^S",1006,"^T",27,"^18",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",27,"^[",["^V",[["^M","~$p"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1006,"^13",["^6",["^14","^1K"]],"^S",1006,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^M","~$p"]]]]],"^Y","Do not call this directly, use '*'"],"~$t_cljs$spec$alpha37122",["^ ","^31",5,"^32",["^6",["^33","^34","^1Y","^35"]],"^=","^1<","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^36",true,"^37",true,"^R",5,"^Q",1411,"^38",false,"^1@","^39","^3:",["^6",["^34","^35"]]],"~$op-describe",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1143,"^R",8,"^S",1143,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-describe","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$p"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1143,"^13",["^6",[null,"^5U","^14","^1K"]],"^S",1143,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",206,"^R",7,"^S",206,"^T",15,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",15,"^[",["^V",[["^X"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",206,"^13",["^6",[null,"^14"]],"^S",206,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^X"]]]]],"^Y","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",387,"^R",8,"^S",387,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/explain-1","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",387,"^13",["^6",["^1R","^14"]],"^S",387,"^15",6,"^16",true,"^U",["^V",["^W",["^V",[["^M","^19","^1M","^1N","^1O","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",264,"^R",7,"^S",264,"^T",18,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^1I"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",264,"^13","^14","^S",264,"^15",1,"^16",true,"^U",["^V",["^W",["^V",[["^1I"]]]]],"^Y","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1214,"^R",8,"^S",1214,"^T",14,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","^6E","^1M","^4<","~$f"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/re-gen","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",14,"^[",["^V",[["~$p","^6E","^1M","^4<","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1214,"^13",["^6",["^14","^1K"]],"^S",1214,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^6E","^1M","^4<","~$f"]]]]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1020,"^R",8,"^S",1020,"^T",18,"^1E",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C","~$f"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/filter-alt","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",18,"^[",["^V",[["^2B","^2A","^2C","~$f"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1020,"^13","^1R","^S",1020,"^15",4,"^16",true,"^U",["^V",["^W",["^V",[["^2B","^2A","^2C","~$f"]]]]]],"~$->t_cljs$spec$alpha37119",["^ ","^N",null,"^O",["^ ","^37",true,"^32",["^6",["^33","^34","^1Y","^35"]],"^3:",["^6",["^34","^35"]],"^4V","^4W","^U",["^V",["^W",["^V",[["^X","~$meta37120"]]]]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37119.","^P",null],"^32",["^6",["^33","^34","^1Y","^35"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha37119","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^[",["^V",[["^X","^:L"]]],"^10",null,"^11",["^V",[null,null]],"^37",true,"^R",5,"^12",false,"^4V","^4W","^Q",1391,"^13","^2>","^15",2,"^16",true,"^U",["^V",["^W",["^V",[["^X","^:L"]]]]],"^3:",["^6",["^34","^35"]],"^Y","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha37119."],"~$and-preds",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",726,"^R",8,"^S",726,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$x","^2X","^2C"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/and-preds","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$x","^2X","^2C"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",726,"^13",["^6",[null,"^22"]],"^S",726,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$x","^2X","^2C"]]]]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1318,"^R",8,"^S",1318,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$f","^5O","^9T"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/call-valid?","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^5O","^9T"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1318,"^13",["^6",["^2S","^14","^1K"]],"^S",1318,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^5O","^9T"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1089,"^R",8,"^S",1089,"^T",17,"^1E",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/op-unform","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",17,"^[",["^V",[["~$p","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1089,"^13",["^6",["^1R","^14"]],"^S",1089,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",999,"^R",8,"^S",999,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["^3M","^3N","^2G","~$splice","^M"]]]]]],"^1E",true,"^=","~$cljs.spec.alpha/rep*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^3M","^3N","^2G","^:U","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",999,"^13",["^6",["^14","^1K"]],"^S",999,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^3M","^3N","^2G","^:U","^M"]]]]]],"^1W",["^ ","^N",null,"^O",["^ ","^4@","^1Y","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^R",4,"^Q",132,"^S",132,"^U",["^V",["^W",["^V",[["~$_"],["~$_","^M"]]]]],"^Y",null],"^4@","^1Y","^=","~$cljs.spec.alpha/specize*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^2K",["^ ","^12",false,"^15",2,"^[",["^V",[["~$_"],["~$_","^M"]]],"^U",["^V",[["~$_"],["~$_","^M"]]],"^11",["^V",[null,null]]],"^[",["^V",[["~$_"],["~$_","^M"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",131,"^S",132,"^15",2,"^16",true,"^U",["^V",[["~$_"],["~$_","^M"]]],"^Y",null],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1048,"^R",19,"^S",1048,"^T",29,"^18",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",29,"^[",["^V",[["~$p","^M"]]],"^10",null,"^18",true,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1048,"^13","^14","^S",1048,"^15",2,"^16",true,"^U",["^V",["^W",["^V",[["~$p","^M"]]]]],"^Y","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",992,"^R",8,"^S",992,"^T",12,"^1E",true,"^U",["^V",["^W",["^V",[["~$&","^2B"]]]]],"^2K",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]]],"^1E",true,"^=","~$cljs.spec.alpha/pcat","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^2K",["^ ","^12",true,"^15",0,"^[",[["^V",["^2B"]]],"^U",["^V",[["~$&","^2B"]]],"^11",["^V",[null]]],"^[",[["^V",["^2B"]]],"^10",null,"^11",["^V",[null]],"^R",1,"^12",true,"^Q",992,"^13","^14","^S",992,"^15",0,"^16",true,"^U",["^V",[["~$&","^2B"]]]],"^6C",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",42,"^R",4,"^S",42,"^T",12,"^4@","^33","^Y",null,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]]],"^4@","^33","^=","~$cljs.spec.alpha/explain*","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",12,"^[",["^V",[["^X","^1M","^1N","^1O","~$x"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",39,"^13","^14","^S",42,"^15",5,"^16",true,"^U",["^V",["^W",["^V",[["^X","^1M","^1N","^1O","~$x"]]]]],"^Y",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^P","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^Q",1329,"^R",8,"^S",1329,"^T",19,"^1E",true,"^U",["^V",["^W",["^V",[["~$f","^5O","~$iters"]]]]],"^Y","returns f if valid, else smallest"],"^1E",true,"^=","~$cljs.spec.alpha/validate-fn","^P","dev-target/public/js/compiled/out/cljs/spec/alpha.cljs","^T",19,"^[",["^V",[["~$f","^5O","^;2"]]],"^10",null,"^11",["^V",[null,null]],"^R",1,"^12",false,"^Q",1329,"^13",["^6",[null,"^14"]],"^S",1329,"^15",3,"^16",true,"^U",["^V",["^W",["^V",[["~$f","^5O","^;2"]]]]],"^Y","returns f if valid, else smallest"]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^V",["~$cljs.spec.alpha/conformer",["^V",["~$fn*",["~$p1__37113#"],["^V",["~$cljs.core/zipmap",["^V",["~$cljs.core/map","~:cljs.spec.alpha/k","^;8"]],["^V",["^;:","~:cljs.spec.alpha/v","^;8"]]]]]],["^V",["^;7",["~$p1__37114#"],["^V",["^;:",["^V",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;;","~$k","^;<","~$v"]]],"^;="]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^M","^2F","^4X","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^7?","^5P","^;8","~$cljs.spec.alpha/+","~:p2","^9J","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","~:pred-exprs","^7<","^8T","~:keys-pred","^5@","~:gen-max","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^80","^9L","~$cljs.core/=","~:opt-keys","^5J","^6T","~:cljs.spec.alpha/rep","~:pred","^81","~:splice","^4Y","^2C","^4Z","^4M","~:cljs.spec.alpha/accept","^5I","~:else","^6U","^9F","~$cljs.core/count","~$cljs.spec.alpha/and","^4C","^4D","^4[","~$cljs.spec.alpha/cat","~:_","^8V","~:maybe","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^1:","~:cljs.spec.alpha/gfn","^:5","^50","^5M","~$v","~:cljs.spec.alpha/spec","^4F","~:conform-keys","^4E","^:L","^77","^82","~$cljs.spec.alpha/fspec","^4O","~$fn","~:amp","^3D","^5N","^44","~$cljs.spec.alpha/nilable","^4G","^;<","~$cljs.spec.alpha/tuple","^19","~$cljs.core/map?","^8X","~:p1","^;9","~:cljs.spec.alpha/problems","^51","~$%","^;:","^;5","~$method","~:distinct","^4H","^8","~$cljs.spec.alpha/keys","^2U","^52","^7:","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^2X","^53","~:req","^54","^55","~$nil?","~:assertion-failed","^;7","^99","^7U","~$cljs.core/<=","^6L","~:cljs.spec.alpha/amp","~:id","^56","~:min-count","~:kind","~:smallest","~$cljs.core/set?","~:count","^8A","~$cljs.core/nil?","^7Z","~:req-keys","^7[","~$k","^;;","^;>","~$cljs.core/list?","^57","^5K","~:opt-specs","^6W","~:cljs.spec.alpha/args","^5L","~$ifn?","~:pred-forms","^4I","^X","^:","~$distinct?","~:max-count","^58","^8W","~:max-elements","^59","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^4=","^8B","^7@","~:num-elements","^5O","^5:","^4J","~$apply","^5;","^5<","^5=","^7;","~:min-elements","^4K","^5>","^8Y","~:cljs.spec.alpha/alt","~$cljs.core/or","^9I","~:cljs.spec.alpha/pred","^66","^;","~:cljs.spec.alpha/nil","^4Q","^9C","^6V","^;6","~:in","^8U","^5?","~:accept","~$cljs.spec.alpha/&","~:opt","^;=","~:cljs.spec.alpha/pcat","^4L","~$cljs.spec.alpha/?"]],"~:order",["^44","^;P","^;K","^<K","^<?","~~:_","^=C","^;V","^=?","^;>","^=;","^<W","^;L","^2U","^7U","^;U","^<T","^;T","^=8","^=0","^<>","^5I","^5J","^5K","^5L","^5M","^5N","^5P","^;5","^;6","^;7","^;8","^;9","^;:","^;;","^;<","^;=","~$k","~$v","^6L","^:L","^=<","^<M","^<A","^66","^;C","^<N"]],"^Y",null]