["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$com.stuartsierra.component.platform","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$argument-error",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",21,"~:arglists",["~#list",["~$quote",["^E",[["~$message"]]]]]],"^5","~$com.stuartsierra.component.platform/argument-error","^?","dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","^C",21,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",5,"~:ret-tag","~$any","^B",5,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]]],"~$type-name",["^ ","^=",null,"^>",["^ ","^?","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","^@",8,"^A",7,"^B",8,"^C",16,"^D",["^E",["^F",["^E",[["~$x"]]]]],"~:doc","Returns a string name for the type/class of x."],"^5","~$com.stuartsierra.component.platform/type-name","^?","dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","^C",16,"^I",["^E",[["~$x"]]],"^J",null,"^K",["^E",[null,null]],"^A",1,"^L",false,"^@",8,"^M","^N","^B",8,"^O",1,"^P",true,"^D",["^E",["^F",["^E",[["~$x"]]]]],"^R","Returns a string name for the type/class of x."],"~$alter-ex-data",["^ ","^=",null,"^>",["^ ","^?","/home/altrunox/Documents/clojure/ClojureReactiveProgramming/sin-wave/dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","^@",13,"^A",7,"^B",13,"^C",20,"^D",["^E",["^F",["^E",[["~$error","~$f","~$&","~$args"]]]]],"^R","Returns a new ExceptionInfo with the same details as error and\n  ex-data as the result of (apply f (ex-data throwable) args).","~:top-fn",["^ ","^L",true,"^O",2,"^I",[["^E",["^U","~$f","^V"]]],"^D",["^E",[["^U","~$f","~$&","^V"]]],"^K",["^E",[null]]]],"^5","~$com.stuartsierra.component.platform/alter-ex-data","^?","dev-target/public/js/compiled/out/com/stuartsierra/component/platform.cljs","^C",20,"^W",["^ ","^L",true,"^O",2,"^I",[["^E",["^U","~$f","^V"]]],"^D",["^E",[["^U","~$f","~$&","^V"]]],"^K",["^E",[null]]],"^I",[["^E",["^U","~$f","^V"]]],"^J",null,"^K",["^E",[null]],"^A",1,"^L",true,"^@",13,"^M","^N","^B",13,"^O",2,"^P",true,"^D",["^E",[["^U","~$f","~$&","^V"]]],"^R","Returns a new ExceptionInfo with the same details as error and\n  ex-data as the result of (apply f (ex-data throwable) args)."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:com.stuartsierra.component.platform/illegal-argument","~:reason"]],"~:order",["^12","^11"]],"^R","Platform-specific implementation details for Component on\n  ClojureScript (JavaScript). This is not a public API."]